#Kindly install sklearn,tensorflow and other basic python libraries


import numpy as np
import math
import pandas
from sklearn import tree,svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import chi2
from sklearn.feature_selection import SelectKBest

from keras.layers import Dense,Flatten
from keras.models import Sequential

FEATURES_N=10



file1='benign_dataset.csv'
file2='malware_dataset.csv'

malwares=pandas.read_csv(file2,delimiter='\t')
benign=pandas.read_csv(file1,delimiter='\t')

malwares.drop(malwares.columns[[0,198]],axis=1,inplace=True)
benign.drop(benign.columns[[0,198]],axis=1,inplace=True)

new=pandas.concat([malwares,benign],axis=0,ignore_index=True)
labels=[]
for i in range(len(malwares.values)):
    labels.append(1)
for i in range(len(benign.values)):
    labels.append(0)
    
new['labels']=labels
#1 for malware,0 for benign
np.random.shuffle(new.values)

X=new.values[:,:197]
y=new.values[:,197]
x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.1)

#Feature Selection
bestfeatures = SelectKBest(score_func=chi2, k=FEATURES_N)
fit = bestfeatures.fit(x_train,y_train)

for i,x in enumerate(fit.scores_): 
    if math.isnan(x):
        fit.scores_[i]=0
        
        
        
imp_features=np.argsort(fit.scores_)[-FEATURES_N:]
imp_features=np.sort(imp_features)


x_train=x_train[:,imp_features]
x_train=np.array(x_train)


#Building different classifiers
clf_dt=tree.DecisionTreeClassifier()
clf_dt.fit(x_train,y_train)

clf_svm=svm.SVC(probability=True)
clf_svm.fit(x_train,y_train)

clf_rf=RandomForestClassifier()
clf_rf.fit(x_train,y_train)

gnb=GaussianNB()
gnb.fit(x_train,y_train)

clf_Kneighbours=KNeighborsClassifier()
clf_Kneighbours.fit(x_train,y_train)

clf_reg=LogisticRegression()
clf_reg.fit(x_train,y_train)


model=Sequential()
model.add(Dense(32,activation='relu', input_shape=(FEATURES_N,)))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='Adam',metrics=['accuracy'])
model.summary()
model.fit(x_train,y_train,epochs=5,validation_split=0.2)



x_test=x_test[:,imp_features]

y_pred_svm=clf_svm.predict(x_test)
y_pred_dt=clf_dt.predict(x_test)
y_pred_rf=clf_rf.predict(x_test)
y_pred_gnb=gnb.predict(x_test)
y_pred_Kneighbours=clf_Kneighbours.predict(x_test)
y_pred_reg=clf_reg.predict(x_test)
y_pred_model=model.predict(x_test)





